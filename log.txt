1,5c1,4
< # Source: https://github.com/pytorch/vision/blob/master/torchvision/models/vgg.py#L2
< import torch
< import torch.nn as nn
< from torch.hub import load_state_dict_from_url
< from typing import Union, List, Dict, Any, cast
---
> '''
> Modified from https://github.com/pytorch/vision.git
> '''
> import math
6a6,7
> import torch.nn as nn
> import torch.nn.init as init
14,25d14
< model_urls = {
<     'vgg11': 'https://download.pytorch.org/models/vgg11-bbd30ac9.pth',
<     'vgg13': 'https://download.pytorch.org/models/vgg13-c768596a.pth',
<     'vgg16': 'https://download.pytorch.org/models/vgg16-397923af.pth',
<     'vgg19': 'https://download.pytorch.org/models/vgg19-dcbb9e9d.pth',
<     'vgg11_bn': 'https://download.pytorch.org/models/vgg11_bn-6002323d.pth',
<     'vgg13_bn': 'https://download.pytorch.org/models/vgg13_bn-abd245e5.pth',
<     'vgg16_bn': 'https://download.pytorch.org/models/vgg16_bn-6c64b313.pth',
<     'vgg19_bn': 'https://download.pytorch.org/models/vgg19_bn-c79401a0.pth',
< }
< 
< 
27,33c16,19
< 
<     def __init__(
<         self,
<         features: nn.Module,
<         num_classes: int = 10,
<         init_weights: bool = True
<     ) -> None:
---
>     '''
>     VGG model 
>     '''
>     def __init__(self, features):
36d21
<         self.avgpool = nn.AdaptiveAvgPool2d((7, 7))
38,39d22
<             nn.Linear(512 * 7 * 7, 4096),
<             nn.ReLU(True),
41c24
<             nn.Linear(4096, 4096),
---
>             nn.Linear(512, 512),
44c27,29
<             nn.Linear(4096, num_classes),
---
>             nn.Linear(512, 512),
>             nn.ReLU(True),
>             nn.Linear(512, 10),
46,47c31,37
<         if init_weights:
<             self._initialize_weights()
---
>          # Initialize weights
>         for m in self.modules():
>             if isinstance(m, nn.Conv2d):
>                 n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
>                 m.weight.data.normal_(0, math.sqrt(2. / n))
>                 m.bias.data.zero_()
> 
49c39
<     def forward(self, x: torch.Tensor) -> torch.Tensor:
---
>     def forward(self, x):
51,52c41
<         x = self.avgpool(x)
<         x = torch.flatten(x, 1)
---
>         x = x.view(x.size(0), -1)
56,68d44
<     def _initialize_weights(self) -> None:
<         for m in self.modules():
<             if isinstance(m, nn.Conv2d):
<                 nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
<                 if m.bias is not None:
<                     nn.init.constant_(m.bias, 0)
<             elif isinstance(m, nn.BatchNorm2d):
<                 nn.init.constant_(m.weight, 1)
<                 nn.init.constant_(m.bias, 0)
<             elif isinstance(m, nn.Linear):
<                 nn.init.normal_(m.weight, 0, 0.01)
<                 nn.init.constant_(m.bias, 0)
< 
70,71c46,47
< def make_layers(cfg: List[Union[str, int]], batch_norm: bool = False) -> nn.Sequential:
<     layers: List[nn.Module] = []
---
> def make_layers(cfg, batch_norm=False):
>     layers = []
77d52
<             v = cast(int, v)
87c62
< cfgs: Dict[str, List[Union[str, int]]] = {
---
> cfg = {
91c66,67
<     'E': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 256, 'M', 512, 512, 512, 512, 'M', 512, 512, 512, 512, 'M'],
---
>     'E': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 256, 'M', 512, 512, 512, 512, 'M', 
>           512, 512, 512, 512, 'M'],
95,183c71,108
< def _vgg(arch: str, cfg: str, batch_norm: bool, pretrained: bool, progress: bool, **kwargs: Any) -> VGG:
<     if pretrained:
<         kwargs['init_weights'] = False
<     model = VGG(make_layers(cfgs[cfg], batch_norm=batch_norm), **kwargs)
<     if pretrained:
<         state_dict = load_state_dict_from_url(model_urls[arch],
<                                               progress=progress)
<         model.load_state_dict(state_dict)
<     return model
< 
< 
< def vgg11(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 11-layer model (configuration "A") from
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg11', 'A', False, pretrained, progress, **kwargs)
< 
< 
< def vgg11_bn(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 11-layer model (configuration "A") with batch normalization
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg11_bn', 'A', True, pretrained, progress, **kwargs)
< 
< 
< def vgg13(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 13-layer model (configuration "B")
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg13', 'B', False, pretrained, progress, **kwargs)
< 
< 
< def vgg13_bn(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 13-layer model (configuration "B") with batch normalization
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg13_bn', 'B', True, pretrained, progress, **kwargs)
< 
< 
< def vgg16(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 16-layer model (configuration "D")
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg16', 'D', False, pretrained, progress, **kwargs)
< 
< 
< def vgg16_bn(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 16-layer model (configuration "D") with batch normalization
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg16_bn', 'D', True, pretrained, progress, **kwargs)
< 
< 
< def vgg19(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 19-layer model (configuration "E")
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg19', 'E', False, pretrained, progress, **kwargs)
< 
< 
< def vgg19_bn(pretrained: bool = False, progress: bool = True, **kwargs: Any) -> VGG:
<     r"""VGG 19-layer model (configuration 'E') with batch normalization
<     `"Very Deep Convolutional Networks For Large-Scale Image Recognition" <https://arxiv.org/pdf/1409.1556.pdf>`._
<     Args:
<         pretrained (bool): If True, returns a model pre-trained on ImageNet
<         progress (bool): If True, displays a progress bar of the download to stderr
<     """
<     return _vgg('vgg19_bn', 'E', True, pretrained, progress, **kwargs)
---
> def vgg11():
>     """VGG 11-layer model (configuration "A")"""
>     return VGG(make_layers(cfg['A']))
> 
> 
> def vgg11_bn():
>     """VGG 11-layer model (configuration "A") with batch normalization"""
>     return VGG(make_layers(cfg['A'], batch_norm=True))
> 
> 
> def vgg13():
>     """VGG 13-layer model (configuration "B")"""
>     return VGG(make_layers(cfg['B']))
> 
> 
> def vgg13_bn():
>     """VGG 13-layer model (configuration "B") with batch normalization"""
>     return VGG(make_layers(cfg['B'], batch_norm=True))
> 
> 
> def vgg16():
>     """VGG 16-layer model (configuration "D")"""
>     return VGG(make_layers(cfg['D']))
> 
> 
> def vgg16_bn():
>     """VGG 16-layer model (configuration "D") with batch normalization"""
>     return VGG(make_layers(cfg['D'], batch_norm=True))
> 
> 
> def vgg19():
>     """VGG 19-layer model (configuration "E")"""
>     return VGG(make_layers(cfg['E']))
> 
> 
> def vgg19_bn():
>     """VGG 19-layer model (configuration 'E') with batch normalization"""
>     return VGG(make_layers(cfg['E'], batch_norm=True))
